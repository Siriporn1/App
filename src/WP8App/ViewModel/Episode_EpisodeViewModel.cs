// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   ViewModel.tt
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls=WPAppStudio.Controls;
using Entities=WPAppStudio.Entities;
using EntitiesBase=WPAppStudio.Entities.Base;
using IServices=WPAppStudio.Services.Interfaces;
using IViewModels=WPAppStudio.ViewModel.Interfaces;
using Localization=WPAppStudio.Localization;
using Repositories=WPAppStudio.Repositories;
using Services=WPAppStudio.Services;
using ViewModelsBase=WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of Episode_Episode ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class Episode_EpisodeViewModel : ViewModelsBase.VMBase, IViewModels.IEpisode_EpisodeViewModel
    {       

		private readonly IServices.IDialogService _dialogService;
		private readonly Repositories.IEpisode_picturesDataSource _episode_picturesDataSource;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="Episode_EpisodeViewModel" /> class.
        /// </summary>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="episode_picturesDataSource">The Episode_pictures Data Source.</param>
        public Episode_EpisodeViewModel(IServices.IDialogService dialogService, Repositories.IEpisode_picturesDataSource episode_picturesDataSource)
        {
			_dialogService = dialogService;
			_episode_picturesDataSource = episode_picturesDataSource;
        }
		
	
		private ObservableCollection<EntitiesBase.RssSearchResult> _episode_EpisodeListControlCollection;

        /// <summary>
        /// Episode_EpisodeListControlCollection property.
        /// </summary>		
        public ObservableCollection<EntitiesBase.RssSearchResult> Episode_EpisodeListControlCollection
        {
            get
            {
				
                if(_episode_EpisodeListControlCollection == null)
					GetEpisode_EpisodeListControlCollectionData();
				return _episode_EpisodeListControlCollection;     
            }
            set
            {
                SetProperty(ref _episode_EpisodeListControlCollection, value);
            }
        }
	
		private EntitiesBase.RssSearchResult _selectedEpisode_EpisodeListControlCollection;

        /// <summary>
        /// SelectedEpisode_EpisodeListControlCollection property.
        /// </summary>		
        public EntitiesBase.RssSearchResult SelectedEpisode_EpisodeListControlCollection
        {
            get
            {
				return _selectedEpisode_EpisodeListControlCollection;
            }
            set
            {
                SetProperty(ref _selectedEpisode_EpisodeListControlCollection, value);
            }
        }

        /// <summary>
        /// Delegate method for the RefreshEpisode_EpisodeListControlCollectionCommand command.
        /// </summary>
        public async void RefreshEpisode_EpisodeListControlCollectionCommandDelegate() 
        {
			try
			{
				LoadingEpisode_EpisodeListControlCollection = true;
				var items = await  _episode_picturesDataSource.Refresh();
				Episode_EpisodeListControlCollection = items;
			}
            catch (Exception ex)
            {
				Episode_EpisodeListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(Localization.AppResources.rssError + Environment.NewLine + Localization.AppResources.TryAgain);
            }
            finally
            {
				LoadingEpisode_EpisodeListControlCollection = false;
			}
        }
		
		
        private bool _loadingEpisode_EpisodeListControlCollection;
		
        public bool LoadingEpisode_EpisodeListControlCollection
        {
            get { return _loadingEpisode_EpisodeListControlCollection; }
            set { SetProperty(ref _loadingEpisode_EpisodeListControlCollection, value); }
        }

        private ICommand _refreshEpisode_EpisodeListControlCollectionCommand;

        /// <summary>
        /// Gets the RefreshEpisode_EpisodeListControlCollectionCommand command.
        /// </summary>
        public ICommand RefreshEpisode_EpisodeListControlCollectionCommand
        {
            get { return _refreshEpisode_EpisodeListControlCollectionCommand = _refreshEpisode_EpisodeListControlCollectionCommand ?? new ViewModelsBase.DelegateCommand(RefreshEpisode_EpisodeListControlCollectionCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the GetEpisode_EpisodeListControlCollectionCommand command.
        /// </summary>
        public  void GetEpisode_EpisodeListControlCollectionCommandDelegate(int pageNumber= 0) 
        {
				GetEpisode_EpisodeListControlCollectionData(pageNumber);
        }
		

        private ICommand _getEpisode_EpisodeListControlCollectionCommand;

        /// <summary>
        /// Gets the GetEpisode_EpisodeListControlCollectionCommand command.
        /// </summary>
        public ICommand GetEpisode_EpisodeListControlCollectionCommand
        {
            get { return _getEpisode_EpisodeListControlCollectionCommand = _getEpisode_EpisodeListControlCollectionCommand ?? new ViewModelsBase.DelegateCommand<int>(GetEpisode_EpisodeListControlCollectionCommandDelegate); }
        }

        private async void GetEpisode_EpisodeListControlCollectionData(int pageNumber = 0)
        {
	
			try
			{
				LoadingEpisode_EpisodeListControlCollection = true;
			
				var items = await _episode_picturesDataSource.GetData();
                Episode_EpisodeListControlCollection = items;
			}
            catch (Exception ex)
            {
				Episode_EpisodeListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(Localization.AppResources.rssError + Environment.NewLine + Localization.AppResources.TryAgain);
            }
            finally
            {
				LoadingEpisode_EpisodeListControlCollection = false;
			}
		}
    }
}
