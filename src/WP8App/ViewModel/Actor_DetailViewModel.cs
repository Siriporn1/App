// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   ViewModel.tt
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls=WPAppStudio.Controls;
using Entities=WPAppStudio.Entities;
using EntitiesBase=WPAppStudio.Entities.Base;
using IServices=WPAppStudio.Services.Interfaces;
using IViewModels=WPAppStudio.ViewModel.Interfaces;
using Localization=WPAppStudio.Localization;
using Repositories=WPAppStudio.Repositories;
using Services=WPAppStudio.Services;
using ViewModelsBase=WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of Actor_Detail ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class Actor_DetailViewModel : ViewModelsBase.VMBase, IViewModels.IActor_DetailViewModel, ViewModelsBase.INavigable
    {       

		private readonly Repositories.Actor_charactersCollection _actor_charactersCollection;
		private readonly IServices.IDialogService _dialogService;
		private readonly IServices.INavigationService _navigationService;
		private readonly IServices.ISpeechService _speechService;
		private readonly IServices.IShareService _shareService;
		private readonly IServices.ILiveTileService _liveTileService;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="Actor_DetailViewModel" /> class.
        /// </summary>
        /// <param name="actor_charactersCollection">The Actor_characters Collection.</param>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="speechService">The Speech Service.</param>
        /// <param name="shareService">The Share Service.</param>
        /// <param name="liveTileService">The Live Tile Service.</param>
        public Actor_DetailViewModel(Repositories.Actor_charactersCollection actor_charactersCollection, IServices.IDialogService dialogService, IServices.INavigationService navigationService, IServices.ISpeechService speechService, IServices.IShareService shareService, IServices.ILiveTileService liveTileService)
        {
			_actor_charactersCollection = actor_charactersCollection;
			_dialogService = dialogService;
			_navigationService = navigationService;
			_speechService = speechService;
			_shareService = shareService;
			_liveTileService = liveTileService;
        }
		
	
		private Entities.charactersSchema _currentcharactersSchema;

        /// <summary>
        /// CurrentcharactersSchema property.
        /// </summary>		
        public Entities.charactersSchema CurrentcharactersSchema
        {
            get
            {
				return _currentcharactersSchema;
            }
            set
            {
                SetProperty(ref _currentcharactersSchema, value);
            }
        }
	
		private bool _hasNextpanoramaActor_Detail0;

        /// <summary>
        /// HasNextpanoramaActor_Detail0 property.
        /// </summary>		
        public bool HasNextpanoramaActor_Detail0
        {
            get
            {
				return _hasNextpanoramaActor_Detail0;
            }
            set
            {
                SetProperty(ref _hasNextpanoramaActor_Detail0, value);
            }
        }
	
		private bool _hasPreviouspanoramaActor_Detail0;

        /// <summary>
        /// HasPreviouspanoramaActor_Detail0 property.
        /// </summary>		
        public bool HasPreviouspanoramaActor_Detail0
        {
            get
            {
				return _hasPreviouspanoramaActor_Detail0;
            }
            set
            {
                SetProperty(ref _hasPreviouspanoramaActor_Detail0, value);
            }
        }

        /// <summary>
        /// Delegate method for the TextToSpeechActor_DetailStaticControlCommand command.
        /// </summary>
        public  void TextToSpeechActor_DetailStaticControlCommandDelegate() 
        {
				_speechService.TextToSpeech(CurrentcharactersSchema.Subtitle + " " + CurrentcharactersSchema.Description);
        }
		

        private ICommand _textToSpeechActor_DetailStaticControlCommand;

        /// <summary>
        /// Gets the TextToSpeechActor_DetailStaticControlCommand command.
        /// </summary>
        public ICommand TextToSpeechActor_DetailStaticControlCommand
        {
            get { return _textToSpeechActor_DetailStaticControlCommand = _textToSpeechActor_DetailStaticControlCommand ?? new ViewModelsBase.DelegateCommand(TextToSpeechActor_DetailStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the ShareActor_DetailStaticControlCommand command.
        /// </summary>
        public  void ShareActor_DetailStaticControlCommandDelegate() 
        {
				_shareService.Share(CurrentcharactersSchema.Subtitle, CurrentcharactersSchema.Description, "", CurrentcharactersSchema.Image);
        }
		

        private ICommand _shareActor_DetailStaticControlCommand;

        /// <summary>
        /// Gets the ShareActor_DetailStaticControlCommand command.
        /// </summary>
        public ICommand ShareActor_DetailStaticControlCommand
        {
            get { return _shareActor_DetailStaticControlCommand = _shareActor_DetailStaticControlCommand ?? new ViewModelsBase.DelegateCommand(ShareActor_DetailStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the PinToStartActor_DetailStaticControlCommand command.
        /// </summary>
        public  void PinToStartActor_DetailStaticControlCommandDelegate() 
        {
				_liveTileService.PinToStart(typeof(IViewModels.IActor_DetailViewModel), CreateTileInfoActor_DetailStaticControl());
        }
		

        private ICommand _pinToStartActor_DetailStaticControlCommand;

        /// <summary>
        /// Gets the PinToStartActor_DetailStaticControlCommand command.
        /// </summary>
        public ICommand PinToStartActor_DetailStaticControlCommand
        {
            get { return _pinToStartActor_DetailStaticControlCommand = _pinToStartActor_DetailStaticControlCommand ?? new ViewModelsBase.DelegateCommand(PinToStartActor_DetailStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the NextpanoramaActor_Detail0 command.
        /// </summary>
        public  void NextpanoramaActor_Detail0Delegate() 
        {
			var next =  _actor_charactersCollection.Next(CurrentcharactersSchema);

			if(next != null)
				CurrentcharactersSchema = next;

			RefreshHasPrevNext();
        }
		

        private ICommand _nextpanoramaActor_Detail0;

        /// <summary>
        /// Gets the NextpanoramaActor_Detail0 command.
        /// </summary>
        public ICommand NextpanoramaActor_Detail0
        {
            get { return _nextpanoramaActor_Detail0 = _nextpanoramaActor_Detail0 ?? new ViewModelsBase.DelegateCommand(NextpanoramaActor_Detail0Delegate); }
        }

        /// <summary>
        /// Delegate method for the PreviouspanoramaActor_Detail0 command.
        /// </summary>
        public  void PreviouspanoramaActor_Detail0Delegate() 
        {
			var prev =  _actor_charactersCollection.Previous(CurrentcharactersSchema);

			if(prev != null)
				CurrentcharactersSchema = prev;

			RefreshHasPrevNext();
        }
		

        private ICommand _previouspanoramaActor_Detail0;

        /// <summary>
        /// Gets the PreviouspanoramaActor_Detail0 command.
        /// </summary>
        public ICommand PreviouspanoramaActor_Detail0
        {
            get { return _previouspanoramaActor_Detail0 = _previouspanoramaActor_Detail0 ?? new ViewModelsBase.DelegateCommand(PreviouspanoramaActor_Detail0Delegate); }
        }

        private void RefreshHasPrevNext()
        {
            HasPreviouspanoramaActor_Detail0 = _actor_charactersCollection.HasPrevious(CurrentcharactersSchema);
			HasNextpanoramaActor_Detail0 = _actor_charactersCollection.HasNext(CurrentcharactersSchema);
		}
		public object NavigationContext
        {
            set
            {              
                if (!(value is Entities.charactersSchema)) { return; }
                
                CurrentcharactersSchema = value as Entities.charactersSchema;
                RefreshHasPrevNext();
            }
        }
        /// <summary>
        /// Initializes a <see cref="Services.TileInfo" /> object for the Actor_DetailStaticControl control.
        /// </summary>
		/// <returns>A <see cref="Services.TileInfo" /> object.</returns>
        public Services.TileInfo CreateTileInfoActor_DetailStaticControl()
        {
            var tileInfo = new Services.TileInfo
            {
                CurrentId = CurrentcharactersSchema.Id.ToString(),
                Title = CurrentcharactersSchema.Subtitle,
                BackTitle = CurrentcharactersSchema.Subtitle,
                BackContent = CurrentcharactersSchema.Description,
                Count = 0,
                BackgroundImagePath = CurrentcharactersSchema.Image,
                BackBackgroundImagePath = CurrentcharactersSchema.Image,
                LogoPath = "Logo-3484c8ad-4b3a-4078-af0d-5fb2d81a96d3.png"
            };
            return tileInfo;
        }
    }
}
